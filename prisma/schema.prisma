// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum Status {
  SCHEDULED
  IN_PROGRESS
  DONE
  CANCELLED
}

enum BloodType {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
}

model Doctor {
  id            Int             @id @default(autoincrement())
  dni           String          @unique
  names         String
  lastNames     String
  speciality    String
  licenseNumber String
  dea           String
  createAt      DateTime        @default(now())
  updateAt      DateTime        @updatedAt
  deleteAt      DateTime?
  DoctorStudies DoctorStudies[]
  DoctorSurgery DoctorSurgery[]
}

model Administrator {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  name     String
  lastName String
  password String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Nurse {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  name          String
  lastName      String
  password      String
  speciality    String
  licenseNumber String
  dea           String
  dni           String
  createAt      DateTime       @default(now())
  updateAt      DateTime       @updatedAt
  NurseStudies  NurseStudies[]
  NurseSurgery  NurseSurgery[]
}

model Education {
  id              Int             @id @default(autoincrement())
  institutionName String          @unique
  createAt        DateTime        @default(now())
  updateAt        DateTime        @updatedAt
  DoctorStudies   DoctorStudies[]
  NurseStudies    NurseStudies[]
}

model Patient {
  id               Int                @id @default(autoincrement())
  dni              String             @unique
  email            String             @unique
  birthDate        DateTime
  phoneNumber      String
  alergies         String
  name             String
  lastName         String
  weight           Decimal
  height           Decimal
  createAt         DateTime           @default(now())
  updateAt         DateTime           @updatedAt
  deleteAt         DateTime?
  gender           Gender
  bloodType        BloodType
  Surgery          Surgery[]
  EmergencyContact EmergencyContact[]
}

model Surgery {
  id            Int             @id @default(autoincrement())
  patientId     Int
  title         String
  date          DateTime
  time          DateTime
  createAt      DateTime        @default(now())
  updateAt      DateTime        @updatedAt
  deleteAt      DateTime?
  status        Status          @default(SCHEDULED)
  patient       Patient         @relation(fields: [patientId], references: [id])
  Procedure     Procedure[]
  DoctorSurgery DoctorSurgery[]
  NurseSurgery  NurseSurgery[]
}

model EmergencyContact {
  id          Int      @id @default(autoincrement())
  patientId   Int
  name        String
  lastName    String
  email       String   @unique
  phoneNumber String
  dni         String   @unique
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt
  patient     Patient  @relation(fields: [patientId], references: [id])
}

model Procedure {
  id          Int      @default(autoincrement())
  surgeryId   Int
  name        String
  description String
  duration    DateTime
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt
  surgery     Surgery  @relation(fields: [surgeryId], references: [id])

  @@id([id, surgeryId])
}

model DoctorStudies {
  doctorId    Int
  educationId Int
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt

  doctor    Doctor    @relation(fields: [doctorId], references: [id])
  education Education @relation(fields: [educationId], references: [id])

  @@id([doctorId, educationId])
}

model NurseStudies {
  nurseId     Int
  educationId Int
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt

  nurse     Nurse     @relation(fields: [nurseId], references: [id])
  education Education @relation(fields: [educationId], references: [id])

  @@id([nurseId, educationId])
}

model DoctorSurgery {
  doctorId  Int
  surgeryId Int
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt

  doctor  Doctor  @relation(fields: [doctorId], references: [id])
  surgery Surgery @relation(fields: [surgeryId], references: [id])

  @@id([surgeryId, doctorId])
}

model NurseSurgery {
  nurseId   Int
  surgeryId Int
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt

  nurse   Nurse   @relation(fields: [nurseId], references: [id])
  surgery Surgery @relation(fields: [surgeryId], references: [id])

  @@id([surgeryId, nurseId])
}
